import { NextRequest, NextResponse } from "next/server"
import { db } from "@/lib/db"
import { telegram_settings, contact_requests } from "@/lib/db/schema"

const rateLimitMap = new Map<string, { count: number; lastReset: number }>()
const RATE_LIMIT_WINDOW = 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç
const RATE_LIMIT_MAX_REQUESTS = 3 // –º–∞–∫—Å–∏–º—É–º 3 –∑–∞—è–≤–∫–∏ –∑–∞ 15 –º–∏–Ω—É—Ç

function getClientIP(req: NextRequest): string {
  const forwarded = req.headers.get('x-forwarded-for')
  const realIP = req.headers.get('x-real-ip')
  const cfConnectingIP = req.headers.get('cf-connecting-ip')
  
  if (forwarded) {
    return forwarded.split(',')[0].trim()
  }
  if (realIP) return realIP
  if (cfConnectingIP) return cfConnectingIP
  
  return 'unknown'
}

function isRateLimited(clientIP: string): boolean {
  const now = Date.now()
  const clientData = rateLimitMap.get(clientIP)
  
  if (!clientData || now - clientData.lastReset > RATE_LIMIT_WINDOW) {
    rateLimitMap.set(clientIP, { count: 1, lastReset: now })
    return false
  }
  
  if (clientData.count >= RATE_LIMIT_MAX_REQUESTS) {
    return true
  }
  
  clientData.count++
  return false
}

function cleanupRateLimit() {
  const now = Date.now()
  for (const [ip, data] of rateLimitMap.entries()) {
    if (now - data.lastReset > RATE_LIMIT_WINDOW) {
      rateLimitMap.delete(ip)
    }
  }
}

function validatePhoneNumber(phone: string): boolean {
  const phoneRegex = /^[\+]?[1-9][\d]{0,15}$/
  const cleanPhone = phone.replace(/[\s\-\(\)]/g, '')
  return phoneRegex.test(cleanPhone) && cleanPhone.length >= 10 && cleanPhone.length <= 15
}

function validateName(name: string): boolean {
  const nameRegex = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s]{2,50}$/
  return nameRegex.test(name.trim())
}

function sanitizeInput(input: string): string {
  return input.trim().replace(/[<>]/g, '')
}

async function getTelegramSettings() {
  const settings = await db.select().from(telegram_settings).limit(1)
  return settings[0] || null
}

export const POST = async (req: NextRequest) => {
  try {
    cleanupRateLimit()
    
    const clientIP = getClientIP(req)
    
    if (isRateLimited(clientIP)) {
      return NextResponse.json(
        { message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç." },
        { status: 429 }
      )
    }

    const body = await req.json().catch(() => ({}))
    const { name: rawName, phone: rawPhone } = body

    if (!rawName || !rawPhone) {
      return NextResponse.json(
        { message: "–ò–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      )
    }

    const name = sanitizeInput(rawName)
    const phone = sanitizeInput(rawPhone)

    if (!validateName(name)) {
      return NextResponse.json(
        { message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤" },
        { status: 400 }
      )
    }

    if (!validatePhoneNumber(phone)) {
      return NextResponse.json(
        { message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" },
        { status: 400 }
      )
    }

    await db.insert(contact_requests).values({
      name,
      phone,
      status: 'new'
    })

    const settings = await getTelegramSettings()
    
    if (!settings?.bot_token || !settings?.subscriber_chat_id || !settings?.is_active) {
      console.log("Telegram notifications not configured or inactive")
      return NextResponse.json({ 
        message: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." 
      })
    }

    const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!\n\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`

    try {
      const telegramResponse = await fetch(`https://api.telegram.org/bot${settings.bot_token}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: settings.subscriber_chat_id,
          text: message,
          parse_mode: "HTML",
        }),
        signal: AbortSignal.timeout(10000)
      })

      if (!telegramResponse.ok) {
        const errorData = await telegramResponse.json().catch(() => ({}))
        console.error("Telegram API error:", { 
          status: telegramResponse.status, 
          error: errorData.description || 'Unknown error' 
        })
      }
    } catch (telegramError) {
      console.error("Telegram request failed:", telegramError instanceof Error ? telegramError.message : 'Unknown error')
    }

    return NextResponse.json({ 
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." 
    })

  } catch (error) {
    console.error("API error:", error instanceof Error ? error.message : 'Unknown error')
    return NextResponse.json(
      { message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    )
  }
}
